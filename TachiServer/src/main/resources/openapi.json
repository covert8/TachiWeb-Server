{
  "openapi" : "3.0.2",
  "info" : {
    "title" : "TachiWeb",
    "description" : "**Security:**\n\nAuthentication is currently not supported. Clients should use the *No Security* option until authentication is implemented.",
    "contact" : {
      "url" : "https://github.com/TachiWeb/TachiWeb-Server"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "version" : "3.0.1"
  },
  "paths" : {
    "/api/v3/" : {
      "summary" : "The API root."
    },
    "/api/v3/manga" : {
      "summary" : "Path used to manage the list of manga.",
      "description" : "The REST endpoint/path used to list `manga` entities.  This path contains a `GET` operation to perform the list task.",
      "get" : {
        "summary" : "List all manga",
        "description" : "Gets a list of all `manga` entities.",
        "operationId" : "getManga",
        "parameters" : [ {
          "name" : "only-downloaded",
          "in" : "query",
          "description" : "Whether or not to only show downloaded manga.\n\nDefaults to: `false`",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "only-unread",
          "in" : "query",
          "description" : "Whether or not to show only unread manga.\n\nDefaults to: `false`",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "only-completed",
          "in" : "query",
          "description" : "Whether or not to show only completed manga.\n\nDefaults to: `false`",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The method used to sort the returned results.",
          "required" : true,
          "schema" : {
            "enum" : [ "ALPHA", "LAST_READ", "LAST_UPDATED", "UNREAD_CHAPTERS", "TOTAL_CHAPTERS", "SOURCE_NAME" ]
          }
        }, {
          "name" : "only-favorited",
          "in" : "query",
          "description" : "Whether or not to show only favorited manga.\n\nDefaults to: `false`",
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "sort-direction",
          "in" : "query",
          "description" : "The sort direction.",
          "required" : true,
          "schema" : {
            "enum" : [ "ASCENDING", "DESCENDING" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response - returns an array of `manga` entities.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/manga"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/manga/{mangaId}" : {
      "summary" : "Path used to get and update a single manga.",
      "description" : "The REST endpoint/path used to get and update single instances of a `manga`.  This path contains `GET` and `PATCH` operations used to perform the get and update tasks respectively.",
      "get" : {
        "summary" : "Get a manga",
        "description" : "Gets the details of a single instance of a `manga`.",
        "operationId" : "getMangaByMangaId",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns a single `manga`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/manga"
                }
              }
            }
          },
          "404" : {
            "description" : "The manga could not be found."
          }
        }
      },
      "parameters" : [ {
        "name" : "mangaId",
        "in" : "path",
        "description" : "The `manga`'s `id`.",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/manga/{mangaId}/cover" : {
      "summary" : "Get the cover/thumbnail of a manga.",
      "get" : {
        "summary" : "Get a manga's cover/thumbnail.",
        "operationId" : "getCoverOfMangaByMangaId",
        "parameters" : [ {
          "name" : "use-placeholder",
          "in" : "query",
          "description" : "If the manga with the supplied `mangaId` exists but has no cover, supply a placeholder image in place of the `404 Not Found` response.\n\nIf the manga does not exist, a `404 Not Found` response will still be returned.\n\nDefaults to: `false`",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The manga has a cover and it has been returned.",
            "content" : {
              "image/jpeg" : { },
              "image/png" : { },
              "image/webp" : { }
            }
          },
          "404" : {
            "description" : "The manga with the supplied `mangaId` does not exist or has no cover.\n\nThe reason for the failure is supplied in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "enum" : [ "NO_MANGA", "NO_COVER" ]
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "mangaId",
        "in" : "path",
        "description" : "The `manga`'s `id`.",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/manga/{mangaId}/flags" : {
      "summary" : "Path used to manage a single manga's flags.",
      "description" : "",
      "get" : {
        "summary" : "Get a manga's flags",
        "description" : "Gets the details of a single instance of a manga's flags.",
        "operationId" : "getFlagsOfMangaByMangaId",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns a single manga's flags.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/manga-flags"
                }
              }
            }
          },
          "404" : {
            "description" : "No manga with the supplied `mangaId` exists."
          }
        }
      },
      "put" : {
        "summary" : "Replace all of a manga's flags",
        "description" : "Replaces all a manga's flags with the supplied flags.",
        "operationId" : "putFlagsOfMangaByMangaId",
        "requestBody" : {
          "description" : "The new flags to replace the existing flags with.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/manga-flags"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/manga-flags"
                }
              }
            }
          },
          "404" : {
            "description" : "No manga with the supplied `mangaId` exists."
          }
        }
      },
      "parameters" : [ {
        "name" : "mangaId",
        "in" : "path",
        "description" : "The `manga`'s `id`.",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/manga/{mangaId}/favorite" : {
      "summary" : "Path used to manage a single manga's favorite status.",
      "description" : "",
      "put" : {
        "summary" : "Set a manga's favorite status.",
        "description" : "",
        "operationId" : "putFavoriteOfMangaByMangaId",
        "requestBody" : {
          "description" : "The new favorite status of the manga.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "boolean"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful response.\n\nThe new favorite status of the manga is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "404" : {
            "description" : "No manga with the supplied `mangaId` exists."
          }
        }
      },
      "parameters" : [ {
        "name" : "mangaId",
        "in" : "path",
        "description" : "The `manga`'s `id`.",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/manga/{mangaId}/viewer" : {
      "summary" : "Path used to manage a single manga's viewer.",
      "description" : "",
      "put" : {
        "summary" : "Set a manga's viewer.",
        "description" : "",
        "operationId" : "putViewerOfMangaByMangaId",
        "requestBody" : {
          "description" : "The new manga viewer.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/manga-viewer"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful response.\n\nThe new viewer of the manga is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/manga-viewer"
                }
              }
            }
          },
          "404" : {
            "description" : "No manga with the supplied `mangaId` exists."
          }
        }
      },
      "parameters" : [ {
        "name" : "mangaId",
        "in" : "path",
        "description" : "The `manga`'s `id`.",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/categories" : {
      "summary" : "Path used to manage the list of categories.",
      "description" : "",
      "get" : {
        "summary" : "List all categories",
        "description" : "Gets a list of all `category` entities sorted ascending by the `order` field.",
        "operationId" : "getCategories",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns an array of `category` entities.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/category"
                  }
                },
                "examples" : {
                  "Sample response" : {
                    "value" : "[\n    {\n        \"id\": 15,\n        \"name\": \"some text\",\n        \"order\": 22\n    },\n    {\n        \"id\": 94,\n        \"name\": \"some text\",\n        \"order\": 72\n    }\n]"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Create a category",
        "description" : "Creates a new instance of a `category`.",
        "operationId" : "createCategory",
        "requestBody" : {
          "description" : "A new `category` to be created.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/mutate-category-request"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful response.\n\nThe newly created category is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/category"
                }
              }
            }
          },
          "409" : {
            "description" : "Category creation failed due to a conflict.\n\nThe exact reason for the failure is supplied in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "enum" : [ "NAME_CONFLICT", "ORDER_CONFLICT" ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/categories/{categoryId}" : {
      "summary" : "Path used to manage a single category.",
      "description" : "The REST endpoint/path used to get, update, and delete single instances of an `category`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
      "get" : {
        "summary" : "Get a category",
        "description" : "Gets the details of a single instance of a `category`.",
        "operationId" : "getCategoryByCategoryId",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns a single `category`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/category"
                }
              }
            }
          },
          "404" : {
            "description" : "No category with the supplied `id` could be found."
          }
        }
      },
      "put" : {
        "summary" : "Update a category",
        "description" : "Updates an existing `category`.",
        "operationId" : "putCategoryByCategoryId",
        "requestBody" : {
          "description" : "Updated `category` information.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/mutate-category-request"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful response.\n\nThe updated category is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/category"
                }
              }
            }
          },
          "404" : {
            "description" : "No category with the supplied `id` could be found."
          }
        }
      },
      "delete" : {
        "summary" : "Delete a category",
        "description" : "Deletes an existing `category`.",
        "operationId" : "deleteCategoryByCategoryId",
        "responses" : {
          "204" : {
            "description" : "Successful response."
          },
          "404" : {
            "description" : "No category with the supplied `id` could be found."
          }
        }
      },
      "parameters" : [ {
        "name" : "categoryId",
        "in" : "path",
        "description" : "The category's `id`.",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/manga/{mangaId}/chapters" : {
      "summary" : "Get a list of all chapter associated with this manga.",
      "get" : {
        "summary" : "Get a list of all chapter associated with this manga sorted by the manga's flags.",
        "description" : "",
        "operationId" : "getChaptersOfMangaByMangaId",
        "parameters" : [ {
          "name" : "apply-filters",
          "in" : "query",
          "description" : "Whether or not to apply the filters specified in the manga flags.\n\nDefaults to: `false`",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/chapter"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "No manga with the supplied `mangaId` exists."
          }
        }
      },
      "parameters" : [ {
        "name" : "mangaId",
        "in" : "path",
        "description" : "The `manga`'s `id`.",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/manga/{mangaId}/update" : {
      "summary" : "Update a manga's info.",
      "description" : "Does not update a manga's chapters.",
      "post" : {
        "summary" : "Update a manga's metadata/info.",
        "description" : "It is recommended for UIs to call this when the initialized field of the manga is `false`.\n\nCalling this will update the initialized field of the manga to `true` if the request succeeds.",
        "operationId" : "applyUpdateToMangaByMangaId",
        "responses" : {
          "200" : {
            "description" : "Metadata/info update successful.\n\nThe new manga metadata is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/manga"
                }
              }
            }
          },
          "404" : {
            "description" : "No manga with the supplied `mangaId` exists."
          },
          "500" : {
            "description" : "The metadata/info update failed.\n\nThe exact reason is supplied in the responsed body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "mangaId",
        "in" : "path",
        "description" : "The `manga`'s `id`.",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/manga/{mangaId}/chapters/update" : {
      "summary" : "Update a manga's chapters.",
      "description" : "Does not update a manga's info.",
      "post" : {
        "summary" : "Update a manga's chapters.",
        "description" : "It is recommended for UIs to call this when the user transitions from the catalogue screen to the manga screen.",
        "operationId" : "applyUpdateToChaptersOfMangaByMangaId",
        "responses" : {
          "200" : {
            "description" : "Manga chapters update successful.\n\nThe new chapter list will be returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/chapter"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "No manga with the supplied `mangaId` exists."
          },
          "500" : {
            "description" : "The manga chapter update failed.\n\nThe exact reason is supplied in the responsed body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "mangaId",
        "in" : "path",
        "description" : "The `manga`'s `id`.",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/chapters" : {
      "summary" : "Path used to manage chapters.",
      "get" : {
        "summary" : "List all chapters across all manga.",
        "description" : "This operation can be slow and return large amounts of data.\nIt is recommended to be used sparingly.",
        "operationId" : "getChapters",
        "responses" : {
          "200" : {
            "description" : "Successful response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/chapter"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/chapters/{chapterId}" : {
      "summary" : "Path used to manage a single chapter.",
      "get" : {
        "summary" : "Get a single chapter by it's id.",
        "operationId" : "getChapterByChapterId",
        "responses" : {
          "200" : {
            "description" : "Successful response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/chapter"
                }
              }
            }
          },
          "404" : {
            "description" : "No chapter exists with the supplied `chapterId`."
          }
        }
      },
      "parameters" : [ {
        "name" : "chapterId",
        "in" : "path",
        "description" : "The chapter id.",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/chapters/{chapterId}/page-count" : {
      "summary" : "Manage a chapter's page count.",
      "post" : {
        "summary" : "Get a chapter's page count.",
        "description" : "This is POST request for technical reasons.",
        "operationId" : "getPageCountOfChapterByChapterId",
        "responses" : {
          "200" : {
            "description" : "Successful response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "format" : "int64",
                  "type" : "integer"
                }
              }
            }
          },
          "404" : {
            "description" : "No chapter exists with the supplied `chapterId`."
          },
          "500" : {
            "description" : "Failed to calculate the number of pages in the chapter.\n\nThe exact reason is supplied in the responsed body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "chapterId",
        "in" : "path",
        "description" : "The chapter id.",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/chapters/{chapterId}/reading-status" : {
      "summary" : "Updates the time this chapter was last read",
      "get" : {
        "summary" : "Get the reading status of a chapter.",
        "operationId" : "getReadingStatusOfChapterByChapterId",
        "responses" : {
          "200" : {
            "description" : "Successful response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/chapter-reading-status"
                }
              }
            }
          },
          "404" : {
            "description" : "No chapter exists with the supplied `chapterId`."
          }
        }
      },
      "put" : {
        "summary" : "Set the reading status of a chapter.",
        "description" : "Will also update the tracking information associated with this manga.",
        "operationId" : "putReadingStatusOfChapterByChapterId",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/chapter-reading-status"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful response.\n\nThe new reading status of the chapter is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/chapter-reading-status"
                }
              }
            }
          },
          "404" : {
            "description" : "No chapter exists with the supplied `chapterId`."
          }
        }
      },
      "parameters" : [ {
        "name" : "chapterId",
        "in" : "path",
        "description" : "The chapter id.",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/chapters/{chapterId}/download" : {
      "summary" : "Path used to manage the download associated with this chapter",
      "get" : {
        "summary" : "Get the download associated with this chapter.",
        "operationId" : "getDownloadOfChapterByChapterId",
        "responses" : {
          "200" : {
            "description" : "Success response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/download"
                }
              }
            }
          },
          "404" : {
            "description" : "No chapter exists with the supplied `chapterId` or this chapter is not associated with a download.\n\nThe specific error is supplied in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "enum" : [ "NO_CHAPTER", "NO_DOWNLOAD" ]
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Begin downloading a chapter",
        "operationId" : "applyBeginToDownloadOfChapterByChapterId",
        "responses" : {
          "200" : {
            "description" : "Success response.\n\nThe newly created download is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/download"
                }
              }
            }
          },
          "404" : {
            "description" : "No chapter exists with the supplied `chapterId`."
          },
          "409" : {
            "description" : "Failed to begin downloading this chapter as this chapter is already associated with a download.\n\nThe associated download is supplied in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/download"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Delete the download associated with this chapter.",
        "description" : "Note that only fully downloaded downloads can be deleted.",
        "operationId" : "deleteDownloadFromChapterByChapterId",
        "responses" : {
          "204" : {
            "description" : "The download was successfully deleted."
          },
          "404" : {
            "description" : "No chapter exists with the supplied `chapterId` or this chapter is not associated with a download.\n\nThe specific error is supplied in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "enum" : [ "NO_CHAPTER", "NO_DOWNLOAD" ]
                }
              }
            }
          },
          "423" : {
            "description" : "Could not delete the download as the status of the download is not: `DOWNLOADED`."
          }
        }
      },
      "parameters" : [ {
        "name" : "chapterId",
        "in" : "path",
        "description" : "The chapter id.",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/downloader" : {
      "summary" : "Path to manage the chapter downloader.",
      "get" : {
        "summary" : "Gets the chapter downloader.",
        "description" : "",
        "operationId" : "getDownloader",
        "responses" : {
          "200" : {
            "description" : "Success response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/downloader"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/downloader/paused" : {
      "summary" : "Path to manage the pause state of the chapter downloader.",
      "get" : {
        "summary" : "Gets whether or not the downloader is paused.",
        "operationId" : "getPausedOfDownloader",
        "responses" : {
          "200" : {
            "description" : "Success response, returns whether or not the downloader is paused.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Updates the pause state of the downloader.",
        "operationId" : "putPausedOfDownloader",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "boolean"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success response. The new pause state of the downloader is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/downloader/clear" : {
      "summary" : "Path used to clear the downloader's queue.",
      "post" : {
        "summary" : "Clear the downloader's queue.",
        "operationId" : "applyClearToDownloader",
        "responses" : {
          "200" : {
            "description" : "Success response, the new downloader is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/downloader"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/chapters/{chapterId}/page/{pageIndex}/image" : {
      "summary" : "Manage the image associated with a chapter page.",
      "get" : {
        "summary" : "Get the image associated with a chapter page.",
        "description" : "Note that the page image may be animated.",
        "operationId" : "getImageOfPageByPageIndexOfChapterByChapterId",
        "responses" : {
          "200" : {
            "description" : "Success response. The page's image is returned.",
            "content" : {
              "image/jpeg" : { },
              "image/png" : { },
              "image/webp" : { },
              "image/gif" : { }
            }
          },
          "404" : {
            "description" : "No chapter with the specified `chapterId` was found or no page was found at the supplied `pageIndex`.\n\nThe exact failure reason is supplied in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "enum" : [ "NO_CHAPTER", "NO_PAGE" ]
                }
              }
            }
          },
          "500" : {
            "description" : "The server failed to fetch the page's image.\n\nThe exact failure reason is supplied in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "chapterId",
        "in" : "path",
        "description" : "The chapter id.",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      }, {
        "name" : "pageIndex",
        "in" : "path",
        "description" : "The index of the page (0-indexed).",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/backups/backup" : {
      "summary" : "Create a backup",
      "post" : {
        "summary" : "Create a backup",
        "operationId" : "applyBackupToBackups",
        "responses" : {
          "200" : {
            "description" : "The backup was created successfully.",
            "content" : {
              "application/octet-stream" : { }
            }
          }
        }
      }
    },
    "/api/v3/backups/restore" : {
      "summary" : "Restore a backup.",
      "post" : {
        "summary" : "Restore a backup.",
        "operationId" : "applyRestoreToBackups",
        "requestBody" : {
          "content" : {
            "application/octet-stream" : { }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Restore started. The UUID of the task where the restore is running in is supplied in the response body.\n\nThe data field of the task will be of the `restore-task-data` datatype once the restore is completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/tasks" : {
      "summary" : "List all uncompleted tasks",
      "get" : {
        "summary" : "Get a list of all uncompleted tasks.",
        "operationId" : "getTasks",
        "responses" : {
          "200" : {
            "description" : "Success response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/task"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/tasks/{taskUuid}" : {
      "summary" : "Path used to manage a single task.",
      "get" : {
        "summary" : "Get a task.",
        "operationId" : "getTaskByTaskUuid",
        "responses" : {
          "200" : {
            "description" : "Success response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/task"
                }
              }
            }
          },
          "404" : {
            "description" : "No task exists with the supplied `taskUuid`."
          }
        }
      },
      "parameters" : [ {
        "name" : "taskUuid",
        "in" : "path",
        "description" : "The UUID of the task.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/api/v3/sources" : {
      "summary" : "Path used to manage the list of sources.",
      "description" : "",
      "get" : {
        "summary" : "List all sources.",
        "description" : "Gets a list of all `source` entities.",
        "operationId" : "getSources",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns an array of `source` entities.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/source"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/sources/{sourceId}" : {
      "summary" : "Path used to manage a single source.",
      "description" : "",
      "get" : {
        "summary" : "Get a source",
        "description" : "Gets the details of a single instance of a `source`.",
        "operationId" : "getSourceById",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns a single `source`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/source"
                }
              }
            }
          },
          "404" : {
            "description" : "No source exists with the provided `id`."
          }
        }
      },
      "parameters" : [ {
        "name" : "sourceId",
        "in" : "path",
        "description" : "The `id` of the source.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/api/v3/sources/{sourceId}/login" : {
      "summary" : "Path used to login to a source.",
      "post" : {
        "summary" : "Login to a source.",
        "description" : "",
        "operationId" : "applyLoginToSourceBySourceId",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/login-request"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "The login succeeded."
          },
          "400" : {
            "description" : "The source does not require login."
          },
          "401" : {
            "description" : "The login failed (usually this means the credentials are invalid)."
          },
          "404" : {
            "description" : "No source exists with the provided `id`."
          }
        }
      },
      "parameters" : [ {
        "name" : "sourceId",
        "in" : "path",
        "description" : "The `id` of the source.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/api/v3/sources/{sourceId}/filters" : {
      "summary" : "Manage the filters for a source",
      "get" : {
        "summary" : "Get the filters for a source.",
        "operationId" : "getFiltersOfSourceBySourceId",
        "responses" : {
          "200" : {
            "description" : "Success response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalogue-filters"
                }
              }
            }
          },
          "404" : {
            "description" : "No source exists with the provided `id`."
          }
        }
      },
      "parameters" : [ {
        "name" : "sourceId",
        "in" : "path",
        "description" : "The `id` of the source.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/api/v3/sources/{sourceId}/catalogue" : {
      "summary" : "Manage a catalogue page.",
      "post" : {
        "summary" : "Request a catalogue page.",
        "operationId" : "applyCatalogueToSourceById",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/catalogue-page-request"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalogue-page"
                }
              }
            }
          },
          "404" : {
            "description" : "No source exists with the provided `id`."
          },
          "500" : {
            "description" : "Failed to get catalogue page.\n\nThe exact failure reason is supplied in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "sourceId",
        "in" : "path",
        "description" : "The `id` of the source.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/api/v3/sources/{sourceId}/latest-updates" : {
      "summary" : "Manage a latest-updates catalogue page.",
      "post" : {
        "summary" : "Request a latest-updates catalogue page.",
        "operationId" : "applyUpdatesToSourceById",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/latest-updates-request"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/catalogue-page"
                }
              }
            }
          },
          "404" : {
            "description" : "No source exists with the provided `id`."
          },
          "500" : {
            "description" : "Failed to get latest-updates catalogue page.\n\nThe exact failure reason is supplied in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "sourceId",
        "in" : "path",
        "description" : "The `id` of the source.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/api/v3/sync" : {
      "summary" : "Sync endpoint",
      "post" : {
        "summary" : "Sync endpoint.",
        "operationId" : "applySync",
        "requestBody" : {
          "content" : {
            "application/octet-stream" : { }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The sync completed successfully.",
            "content" : {
              "application/octet-stream" : { }
            }
          }
        }
      }
    },
    "/api/v3/preferences" : {
      "summary" : "Path used to manage the list of preferences.",
      "description" : "",
      "get" : {
        "summary" : "List all preferences",
        "description" : "Gets a list of all `preference` entities.",
        "operationId" : "getPreferences",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns an array of `preference` entities.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/preference"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/preferences/{preferenceKey}" : {
      "summary" : "Path used to manage a single preference.",
      "description" : "",
      "get" : {
        "summary" : "Get a preference",
        "description" : "Gets the details of a single instance of a `preference`.",
        "operationId" : "getPreferenceByPreferenceKey",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns a single `preference`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/preference"
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Update a preference",
        "description" : "Updates an existing `preference`.",
        "operationId" : "putPreferenceByPreferenceKey",
        "requestBody" : {
          "description" : "Updated `preference` value.",
          "content" : {
            "application/json" : { }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful response."
          }
        }
      },
      "parameters" : [ {
        "name" : "preferenceKey",
        "in" : "path",
        "description" : "The key of the preference.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/api/v3/preferences/schema" : {
      "summary" : "Get the preference schema (used to render preferences).",
      "get" : {
        "summary" : "Get the preference schema.",
        "operationId" : "getSchemaOfPreferences",
        "responses" : {
          "200" : {
            "description" : "Success response.",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/api/v3/manga/recently-read" : {
      "get" : {
        "summary" : "List recently read manga",
        "description" : "Hardcoded to return a maximum of 25 entries.",
        "operationId" : "getMangaRecentlyRead",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns an array of `recently-read` entities sorted by most to least recent.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/recently-read"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/chapters/{chapterId}/reading-status/last-read" : {
      "summary" : "Manage information on when this chapter was last read",
      "delete" : {
        "summary" : "Deletes the information on when this chapter was last read",
        "operationId" : "deleteLastReadFromReadingStatusOfChapterByChapterId",
        "responses" : {
          "200" : {
            "description" : "Success response."
          },
          "404" : {
            "description" : "No chapter exists with the supplied `chapterId`."
          }
        }
      },
      "parameters" : [ {
        "name" : "chapterId",
        "in" : "path",
        "description" : "The chapter id.",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/categories/{categoryId}/manga" : {
      "summary" : "Path to manage a category's manga.",
      "patch" : {
        "summary" : "Add/remove manga from a category.",
        "operationId" : "patchMangaOfCategoryByCategoryId",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/mutate-category-manga-request"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful response - the specified manga were added/removed from the category."
          },
          "404" : {
            "description" : "No category with the specified `categoryId` was found or a manga `id` specified in the request body array did not have an associated manga.\n\nNo manga were added/removed from the `category`.\n\nThe exact failure reason is supplied in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "enum" : [ "NO_CATEGORY", "NO_MANGA" ]
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "categoryId",
        "in" : "path",
        "description" : "The category's `id`.",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/extensions" : {
      "summary" : "Path to manage extensions.",
      "get" : {
        "summary" : "List all extensions.",
        "description" : "Includes all extensions, regardless of their `status`.",
        "operationId" : "getExtensions",
        "responses" : {
          "200" : {
            "description" : "Successful response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/extension"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "summary" : "Imports an extension from an APK file.",
        "operationId" : "createExtensionFromAPK",
        "requestBody" : {
          "description" : "The extension APK.",
          "content" : {
            "application/vnd.android.package-archive" : { }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful response. The extension was successfully imported.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/extension"
                }
              }
            }
          },
          "400" : {
            "description" : "The request body did not contain a valid extension or the extension could not be imported.\n\nThe exact failure reason is supplied in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/extensions/{extensionPackage}" : {
      "summary" : "Path to manage a single extension",
      "get" : {
        "summary" : "Get information about a specific extension",
        "operationId" : "getExtensionByPackageName",
        "responses" : {
          "200" : {
            "description" : "Successful response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/extension"
                }
              }
            }
          },
          "404" : {
            "description" : "No extension exists with the specified `extensionPackage`."
          }
        }
      },
      "delete" : {
        "summary" : "Delete an extension.",
        "description" : "Extensions that are present in the central repository will not be deleted. Instead, their `status`' will be changed to `AVAILABLE`.",
        "operationId" : "deleteExtensionByPackageName",
        "responses" : {
          "200" : {
            "description" : "The extension was successfully deleted."
          },
          "404" : {
            "description" : "No extension exists with the specified `extensionPackage`."
          }
        }
      },
      "parameters" : [ {
        "name" : "extensionPackage",
        "in" : "path",
        "description" : "The `pkgName` of the extension.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/api/v3/extensions/{extensionPackage}/install" : {
      "description" : "",
      "post" : {
        "summary" : "Installs or updates an extension from the central repository.",
        "description" : "The extension must either have a `status` of `AVAILABLE` or it's `hasUpdate` field is `true`.",
        "operationId" : "applyInstallToExtensionByPackageName",
        "responses" : {
          "200" : {
            "description" : "The extension was successfully installed/updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/extension"
                }
              }
            }
          },
          "400" : {
            "description" : "The extension's status is not `AVAILABLE` and it's `hasUpdate` field is `false`."
          },
          "404" : {
            "description" : "No extension exists with the specified `extensionPackage`."
          },
          "500" : {
            "description" : "The extension could not be installed/updated.\n\nThe exact failure reason is provided in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "extensionPackage",
        "in" : "path",
        "description" : "The `pkgName` of the extension.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/api/v3/extensions/trust" : {
      "post" : {
        "summary" : "Trust a signature hash.",
        "description" : "Multiple extensions may have the same signature hash.\n\nTrusting a signature hash will also cause future extensions that have the same signature hash to be trusted.",
        "operationId" : "applyTrustToExtensions",
        "requestBody" : {
          "description" : "The signature hash.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful response. The provided signature hash is now trusted."
          },
          "400" : {
            "description" : "The provided signature hash is invalid."
          }
        }
      }
    },
    "/api/v3/extensions/{extensionPackage}/icon" : {
      "get" : {
        "summary" : "Get the icon of an extension.",
        "operationId" : "getIconOfExtensionByPackageName",
        "responses" : {
          "200" : {
            "description" : "Successful response.",
            "content" : {
              "image/png" : { },
              "image/webp" : { }
            }
          },
          "404" : {
            "description" : "No extension exists with the specified `extensionPackage`."
          }
        }
      },
      "parameters" : [ {
        "name" : "extensionPackage",
        "in" : "path",
        "description" : "The `pkgName` of the extension.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/api/v3/extensions/reload-available" : {
      "post" : {
        "summary" : "Fetch available extension list from central repository.",
        "description" : "Also checks for extension updates.",
        "operationId" : "applyReloadAvailableToExtensions",
        "responses" : {
          "200" : {
            "description" : "Successful response. The new extension list is returned (including extensions of any `status`).",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/extension"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/tracking/services" : {
      "get" : {
        "summary" : "List all tracking services.",
        "operationId" : "getServicesOfTracking",
        "responses" : {
          "200" : {
            "description" : "Returns a list of all tracking services.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/tracking-service"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/tracking/services/{trackingServiceId}" : {
      "get" : {
        "summary" : "Get information about a single tracking service.",
        "operationId" : "getServiceOfTrackingByTrackingServiceId",
        "responses" : {
          "200" : {
            "description" : "Successful response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/tracking-service"
                }
              }
            }
          },
          "404" : {
            "description" : "No tracking service with the supplied `trackingServiceId` could be found."
          }
        }
      },
      "parameters" : [ {
        "name" : "trackingServiceId",
        "in" : "path",
        "description" : "The `id` of the tracking service.",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/tracking/services/{trackingServiceId}/logout" : {
      "post" : {
        "summary" : "Logout of a tracking service.",
        "description" : "Can only be performed if the user is logged into the tracking service (`loggedIn` field of the tracking service is `true`).",
        "operationId" : "applyLogoutToServiceOfTracking",
        "responses" : {
          "200" : {
            "description" : "Successfully logged out of the tracking service."
          },
          "400" : {
            "description" : "The user is not logged into the specified tracking service (`loggedIn` field of the tracking service is `false`)."
          },
          "404" : {
            "description" : "No tracking service with the supplied `trackingServiceId` could be found."
          }
        }
      },
      "parameters" : [ {
        "name" : "trackingServiceId",
        "in" : "path",
        "description" : "The `id` of the tracking service.",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/tracking/services/{trackingServiceId}/login" : {
      "post" : {
        "summary" : "Logout of a tracking service.",
        "description" : "Can only be performed if the user is logged out of the tracking service (`loggedIn` field of the tracking service is `false`) and the tracking service is not an OAuth based service.",
        "operationId" : "applyLoginToServiceOfTracking",
        "requestBody" : {
          "description" : "The login credentials.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/login-request"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully logged into the tracking service."
          },
          "400" : {
            "description" : "The user is already logged into the specified tracking service (`loggedIn` field of the tracking service is `true`) or the tracking service is an OAuth based service.\n\nThe exact failure reason is provided in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "enum" : [ "OAUTH_ONLY", "ALREADY_LOGGED_IN" ]
                }
              }
            }
          },
          "404" : {
            "description" : "No tracking service with the supplied `trackingServiceId` could be found."
          }
        }
      },
      "parameters" : [ {
        "name" : "trackingServiceId",
        "in" : "path",
        "description" : "The `id` of the tracking service.",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/handle-url" : {
      "post" : {
        "summary" : "Handle an application URL",
        "description" : "This endpoint is used to handle `tachiyomi://` URLs.\n\nClients should intercept all URLs that have the `tachiyomi` scheme and POST these URLs to the server via this endpoint.",
        "operationId" : "applyHandleUrl",
        "requestBody" : {
          "description" : "The entire URL (including the scheme, path and query parameters).",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Indicates that the URL has been processed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/url-handle-result"
                }
              }
            }
          },
          "400" : {
            "description" : "Indicates that the provided URL is not valid."
          }
        }
      }
    },
    "/api/v3/tracking/services/{trackingServiceId}/search" : {
      "post" : {
        "summary" : "Search for manga in a tracking service",
        "description" : "Can only be performed if the user is logged into the tracking service (`loggedIn` field of the tracking service is `true`).",
        "operationId" : "applySearchToServiceOfTracking",
        "requestBody" : {
          "description" : "The search query. Should usually be the title of the manga to search for.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful response - search results are returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/tracking-search-result"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The user is not logged into the specified tracking service (`loggedIn` field of the tracking service is `false`)."
          },
          "404" : {
            "description" : "No tracking service with the supplied `trackingServiceId` could be found."
          },
          "500" : {
            "description" : "The search failed.\n\nThe exact failure reason is provided in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "trackingServiceId",
        "in" : "path",
        "description" : "The `id` of the tracking service.",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/manga/{mangaId}/tracks" : {
      "get" : {
        "summary" : "List all tracking information associated with this manga.",
        "operationId" : "getTracksOfMangaByMangaId",
        "responses" : {
          "200" : {
            "description" : "Returns a list of all tracking information associated with this manga.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/track"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "No manga with the supplied `mangaId` exists."
          }
        }
      },
      "post" : {
        "summary" : "Bind a manga to tracking information",
        "operationId" : "createTrackOfMangaByMangaId",
        "requestBody" : {
          "description" : "A tracking search result.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/tracking-search-result"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Tracking information was bound successfully. The new tracking information is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/track"
                }
              }
            }
          },
          "404" : {
            "description" : "No manga with the supplied `mangaId` exists."
          },
          "500" : {
            "description" : "An error occurred while binding the tracking information.\n\nThe exact failure reason is provided in the repsonse body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "mangaId",
        "in" : "path",
        "description" : "The `manga`'s `id`.",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/manga/{mangaId}/tracks/{trackingServiceId}" : {
      "get" : {
        "summary" : "Get tracking information on the specified tracking service associated with this manga.",
        "operationId" : "getTrackByTrackingServiceIdOfMangaByMangaId",
        "responses" : {
          "200" : {
            "description" : "Returns tracking information on the specified tracking service associated with this manga.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/track"
                }
              }
            }
          },
          "404" : {
            "description" : "No manga with the supplied `mangaId` exists, no tracking service is associated with the specified `trackingServiceId` or no track associated with the tracking service with the specified `trackingServiceId` is bound to this manga.\n\nThe exact failure reason is provided in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "enum" : [ "NO_MANGA", "NO_TRACKING_SERVICE", "NO_TRACK" ]
                }
              }
            }
          }
        }
      },
      "put" : {
        "summary" : "Change the tracking information manually.",
        "operationId" : "putTrackByTrackingServiceIdOfMangaByMangaId",
        "requestBody" : {
          "description" : "The new tracking information. It will overwrite the old tracking information.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/mutate-track-request"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Tracking information changed successfully on the specified service, the updated tracking information is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/track"
                }
              }
            }
          },
          "404" : {
            "description" : "No manga with the supplied `mangaId` exists, no tracking service is associated with the specified `trackingServiceId` or no track associated with the tracking service with the specified `trackingServiceId` is bound to this manga.\n\nThe exact failure reason is provided in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "enum" : [ "NO_MANGA", "NO_TRACKING_SERVICE", "NO_TRACK" ]
                }
              }
            }
          },
          "500" : {
            "description" : "An error occurred while changing the tracking information.\n\nThe exact failure reason is provided in the repsonse body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "summary" : "Unbind a manga from it's tracking information.",
        "operationId" : "deleteTrackByTrackingServiceIdOfMangaByMangaId",
        "responses" : {
          "200" : {
            "description" : "Manga successfully unbound from it's tracking information on the specified tracking service."
          },
          "404" : {
            "description" : "No manga with the supplied `mangaId` exists, no tracking service is associated with the specified `trackingServiceId` or no track associated with the tracking service with the specified `trackingServiceId` is bound to this manga.\n\nThe exact failure reason is provided in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "enum" : [ "NO_MANGA", "NO_TRACKING_SERVICE", "NO_TRACK" ]
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "mangaId",
        "in" : "path",
        "description" : "The `manga`'s `id`.",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      }, {
        "name" : "trackingServiceId",
        "in" : "path",
        "description" : "The `id` of the tracking service.",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/manga/{mangaId}/tracks/{trackingServiceId}/update" : {
      "post" : {
        "summary" : "Re-fetch tracking information from the specified tracking service associated with this manga.",
        "operationId" : "applyUpdateToTrackByTrackingServiceIdOfMangaByMangaId",
        "responses" : {
          "200" : {
            "description" : "Tracking information refreshed successfully, the new information is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/track"
                }
              }
            }
          },
          "404" : {
            "description" : "No manga with the supplied `mangaId` exists, no tracking service is associated with the specified `trackingServiceId` or no track associated with the tracking service with the specified `trackingServiceId` is bound to this manga.\n\nThe exact failure reason is provided in the response body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "enum" : [ "NO_MANGA", "NO_TRACKING_SERVICE", "NO_TRACK" ]
                }
              }
            }
          },
          "500" : {
            "description" : "An error occurred while updating the tracking information.\n\nThe exact failure reason is provided in the repsonse body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "parameters" : [ {
        "name" : "mangaId",
        "in" : "path",
        "description" : "The `manga`'s `id`.",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      }, {
        "name" : "trackingServiceId",
        "in" : "path",
        "description" : "The `id` of the tracking service.",
        "required" : true,
        "schema" : {
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/manga/{mangaId}/bookmark" : {
      "summary" : "Path used to manage a single manga's bookmarked status.",
      "description" : "",
      "put" : {
        "summary" : "Set a manga's bookmarked status.",
        "description" : "",
        "operationId" : "putBookmarkOfMangaByMangaId",
        "requestBody" : {
          "description" : "The new bookmarked status of the manga.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "boolean"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successful response.\n\nThe new bookmarked status of the manga is returned.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "404" : {
            "description" : "No manga with the supplied `mangaId` exists."
          }
        }
      },
      "parameters" : [ {
        "name" : "mangaId",
        "in" : "path",
        "description" : "The `manga`'s `id`.",
        "required" : true,
        "schema" : {
          "format" : "int64",
          "type" : "integer"
        }
      } ]
    },
    "/api/v3/server/stop" : {
      "post" : {
        "summary" : "Stop/shutdown the server.",
        "operationId" : "stopServer",
        "responses" : {
          "200" : {
            "description" : "Successful response, indicates that the server shutdown process has started."
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "manga" : {
        "title" : "Root Type for manga",
        "description" : "A single manga.",
        "required" : [ "id", "favorite", "sourceId", "lastUpdate", "status", "title", "viewer", "flags", "categories", "initialized", "tracks" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "format" : "int64",
            "description" : "The unique identifier for this manga.",
            "type" : "integer"
          },
          "sourceId" : {
            "format" : "int64",
            "description" : "The id of the source this manga belongs to.",
            "type" : "integer"
          },
          "favorite" : {
            "description" : "Whether or not the manga is favorited.",
            "type" : "boolean"
          },
          "lastUpdate" : {
            "format" : "int64",
            "description" : "The time this manga was last updated in milliseconds since epoch.",
            "type" : "integer"
          },
          "viewer" : {
            "$ref" : "#/components/schemas/manga-viewer",
            "description" : "The viewer for this manga."
          },
          "flags" : {
            "$ref" : "#/components/schemas/manga-flags",
            "description" : "The manga's flags.",
            "properties" : {
              "sortDirection" : {
                "type" : "string"
              },
              "displayMode" : {
                "type" : "string"
              },
              "readFilter" : {
                "type" : "string"
              },
              "downloadedFilter" : {
                "type" : "string"
              },
              "sortType" : {
                "type" : "string"
              }
            }
          },
          "url" : {
            "description" : "The URL of this manga on the source. Will not be present for mangas in the local source.",
            "type" : "string"
          },
          "title" : {
            "description" : "The title of this manga.",
            "type" : "string"
          },
          "artist" : {
            "description" : "The artist of the manga.",
            "type" : "string"
          },
          "author" : {
            "description" : "The author of the manga.",
            "type" : "string"
          },
          "description" : {
            "description" : "The description of the manga. Will be rather large and may contain multiple lines/paragraphs.",
            "type" : "string"
          },
          "genre" : {
            "description" : "The genre(s) of a manga. If the manga has multiple genres, the genres are often (but not always) split by comma.",
            "type" : "string"
          },
          "status" : {
            "description" : "The status of this manga.",
            "enum" : [ "UNKNOWN", "ONGOING", "COMPLETED", "LICENSED" ]
          },
          "categories" : {
            "description" : "The `id`s of the categories that this manga belong to.",
            "type" : "array",
            "items" : {
              "format" : "int64",
              "type" : "integer"
            }
          },
          "initialized" : {
            "description" : "Whether or not this manga has had it's metadata (not chapters) updated for the first time yet.",
            "type" : "boolean"
          },
          "tracks" : {
            "description" : "An array of the tracking information associated with this manga.\n\nA single manga may be tracked on multiple services which is why this field is an array.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/track"
            }
          }
        },
        "example" : "{\n    \"id\": 1,\n    \"sourceId\": 123,\n    \"favorite\": true,\n    \"lastUpdate\": 1544920787968,\n    \"viewer\": {},\n    \"flags\": {\n        \"sortDirection\": \"DESCENDING\",\n        \"displayMode\": \"NAME\",\n        \"readFilter\": \"ALL\",\n        \"downloadedFilter\": \"ALL\",\n        \"sortType\": \"SOURCE\"\n    },\n    \"url\": \"https://mangadex.org/title/17709/kumo-desu-ga-nani-ka\",\n    \"title\": \"Kumo Desu ga, Nani ka?\",\n    \"artist\": \"Kakashi Asahiro\",\n    \"author\": \"Baba Okina\",\n    \"description\": \"When a mysterious explosion killed an entire class full of high school students, the souls of everyone in class were transported into a fantasy world and reincarnated. While some students were reincarnated as princes or prodigies, others were not as blessed.\\n\\nOur heroine, who was the lowest in the class, discovered that she was reincarnated as a spider! Now at the bottom of the food chain, she needs to adapt to the current situation with willpower in order to live. Stuck in a dangerous labyrinth filled with monsters, it's eat or be eaten!\\n\\nThis is the story of a spider doing whatever she can in order to survive!\",\n    \"genre\": \"Action, Adventure, Comedy, Drama, Fantasy, Isekai\",\n    \"status\": \"ONGOING\",\n    \"categories\": [2, 4],\n    \"initialized\": true\n}"
      },
      "sort-direction" : {
        "description" : "An enum representing sort direction.",
        "enum" : [ "NAME", "NUMBER" ]
      },
      "manga-viewer" : {
        "description" : "An enum representing a manga's viewer:\n\n- `DEFAULT`: The user's default viewer (stored in the user preferences)\n- `LEFT_TO_RIGHT`: A paged left-to-right viewer.\n- `RIGHT_TO_LEFT`: A paged right-to-left viewer.\n- `VERTICAL`: A paged top-to-bottom viewer.\n- `WEBTOON`: A continous top-to-bottom viewer.",
        "enum" : [ "DEFAULT", "LEFT_TO_RIGHT", "RIGHT_TO_LEFT", "VERTICAL", "WEBTOON" ]
      },
      "mutate-category-request" : {
        "title" : "Root Type for category",
        "description" : "A request to create/edit a category.",
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "The name of the category.\n\nMust be unique across all categories (case-insensitive, two categories are considered the same if their only difference is different casing).",
            "type" : "string"
          },
          "order" : {
            "format" : "int64",
            "description" : "Categories are sorted ascending by this number.\n\nMust be unique across all categories.\n\nDefaults to the `maximum order of all existing categories + 1`.",
            "type" : "integer"
          }
        },
        "example" : "{\n    \"name\": \"Dropped\",\n    \"order\": 1\n}"
      },
      "chapter" : {
        "title" : "Root Type for chapter",
        "description" : "A single chapter of a manga.",
        "required" : [ "bookmarked", "dateFetch", "id", "mangaId", "name", "readingStatus" ],
        "type" : "object",
        "properties" : {
          "url" : {
            "description" : "The url of this chapter on the source website.\n\nWill be `null` if this chapter belongs to a manga in the local source.",
            "type" : "string"
          },
          "name" : {
            "description" : "The name of this chapter.",
            "type" : "string"
          },
          "dateUpload" : {
            "format" : "int64",
            "description" : "The date in milliseconds since epoch representing when this chapter was uploaded to the source.",
            "type" : "integer"
          },
          "chapterNumber" : {
            "format" : "float",
            "description" : "The chapter number of this chapter (usually parsed from the chapter name).\n\nWill be `null` if unknown.",
            "type" : "number"
          },
          "scanlator" : {
            "description" : "The name of the scanlator for this chapter.",
            "type" : "string"
          },
          "id" : {
            "format" : "int64",
            "description" : "A unique identifier for this chapter. Will be unique across all chapters and all manga.",
            "type" : "integer"
          },
          "mangaId" : {
            "format" : "int64",
            "description" : "The id of the `manga` this chapter belongs to.",
            "type" : "integer"
          },
          "dateFetch" : {
            "format" : "int64",
            "description" : "The date in milliseconds since epoch representing when the metadata for this chapter was downloaded from the source URL.",
            "type" : "integer"
          },
          "sourceOrder" : {
            "format" : "int64",
            "description" : "The index that this chapter appears in on the source website.",
            "type" : "integer"
          },
          "readingStatus" : {
            "$ref" : "#/components/schemas/chapter-reading-status",
            "description" : "The reading status of this chapter."
          },
          "bookmarked" : {
            "description" : "Whether or not the chapter is bookmarked.",
            "type" : "boolean"
          }
        },
        "example" : "{\n    \"url\": \"https://mangadex.org/chapter/415934\",\n    \"name\": \"Ch. 29.2\",\n    \"dateUpload\": 1544928692640,\n    \"chapterNumber\": 29.2,\n    \"scanlator\": \"aumakua\",\n    \"id\": 35,\n    \"mangaId\": 1,\n    \"bookmark\": false,\n    \"dateFetch\": 1544928692640,\n    \"sourceOrder\": 0,\n    \"readingStatus\": {\n        \"read\": false,\n        \"lastPageRead\": 0\n    }\n}"
      },
      "chapter-reading-status" : {
        "title" : "Root Type for chapter-reading-status",
        "description" : "The reading status of a chapter.",
        "required" : [ "read", "lastPageRead" ],
        "type" : "object",
        "properties" : {
          "read" : {
            "description" : "Whether or not this chapter is fully read.",
            "type" : "boolean"
          },
          "lastPageRead" : {
            "format" : "int64",
            "description" : "The last page read in this chapter.",
            "type" : "integer"
          },
          "lastRead" : {
            "format" : "int64",
            "description" : "The time this chapter was last read in milliseconds since epoch. Not present if unknown.",
            "type" : "integer"
          }
        },
        "example" : "{\n    \"read\": false,\n    \"lastPageRead\": 0,\n    \"lastRead\": 1551218464314\n}"
      },
      "download" : {
        "title" : "Root Type for download",
        "description" : "A chapter download. May represent a complete or partial download.",
        "required" : [ "mangaId", "chapterId", "chapterName", "downloadedPages", "progress", "mangaTitle", "status" ],
        "type" : "object",
        "properties" : {
          "mangaTitle" : {
            "description" : "The title of the manga of the chapter associated with this download.",
            "type" : "string"
          },
          "chapterName" : {
            "description" : "The name of the chapter associated with this download.\n\nDepends on the `displayMode` field of the manga the chapter belongs to.",
            "type" : "string"
          },
          "progress" : {
            "format" : "float",
            "description" : "The progress of this download between (0 and 1).\n\nNote that this number is not equal to the `downloadedPages` divided by `totalPages` since this number also includes the download progress on any currently downloading pages.",
            "type" : "number"
          },
          "downloadedPages" : {
            "format" : "int64",
            "description" : "The number of pages fully downloaded so far.",
            "type" : "integer"
          },
          "totalPages" : {
            "format" : "int64",
            "description" : "The total number of pages in the chapter associated with this download.\n\nWill be `null` if currently unknown.",
            "type" : "integer"
          },
          "mangaId" : {
            "format" : "int64",
            "description" : "The id of the manga of the chapter associated with this download.",
            "type" : "integer"
          },
          "chapterId" : {
            "format" : "int64",
            "description" : "The id of the chapter associated with this download.",
            "type" : "integer"
          },
          "status" : {
            "description" : "The status of this download.",
            "enum" : [ "QUEUED", "DOWNLOADING", "DOWNLOADED", "ERROR" ]
          }
        },
        "example" : "{\n    \"mangaTitle\": \"Kumo Desu ga, Nani ka?\",\n    \"chapterName\": \"Ch. 29.2\",\n    \"mangaId\": 1,\n    \"chapterId\": 2,\n    \"progress\": 0.51,\n    \"downloadedPages\": 10,\n    \"totalPages\": 20,\n    \"status\": \"DOWNLOADING\"\n}"
      },
      "downloader" : {
        "description" : "The chapter downloader on the server.",
        "required" : [ "paused", "downloads" ],
        "type" : "object",
        "properties" : {
          "paused" : {
            "description" : "Whether or not the downloader is paused.",
            "type" : "boolean"
          },
          "downloads" : {
            "description" : "A list of all currently **unfinished** downloads.\n\nIncludes only downloads in the `QUEUED`, `DOWNLOADING` and `ERROR` states.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/download"
            }
          }
        }
      },
      "task" : {
        "description" : "A long-running task.",
        "required" : [ "type", "completed", "startedAt", "uuid" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "description" : "The type of the task.",
            "enum" : [ "RESTORE_BACKUP", "UPDATE_LIBRARY" ]
          },
          "completed" : {
            "description" : "Whether or not the task is completed.",
            "type" : "boolean"
          },
          "progress" : {
            "format" : "float",
            "description" : "The progress on the task (between 0 and 1).\n\nCan be `null` if unknown.",
            "type" : "number"
          },
          "startedAt" : {
            "format" : "int64",
            "description" : "The time when this task was started in milliseconds since epoch.",
            "type" : "integer"
          },
          "progressText" : {
            "description" : "The progress of the current task in textual form.\n\nMay represent the currently processing subtask in this task.",
            "type" : "string"
          },
          "data" : {
            "description" : "The data associated with the task.\n\nUsually only existant when the task is completed.",
            "type" : "string"
          },
          "uuid" : {
            "description" : "The UUID of the task.\n\nNote that the value of this field is opaque, clients should not attempt to parse it. It will always be URL safe.",
            "type" : "string"
          }
        },
        "example" : "{\n    \"type\": \"RESTORE_BACKUP\",\n    \"completed\": true,\n    \"progress\": 1.0,\n    \"startedAt\": 1551594603012,\n    \"progressText\": \"Restored 10082 manga\",\n    \"data\": \"[100, 2, 4, 5]\",\n    \"uuid\": \"01ARZ3NDEKTSV4RRFFQ69G5FAV\"\n}"
      },
      "restore-task-data" : {
        "title" : "Root Type for restore-task-data",
        "description" : "The data of a restore task.",
        "required" : [ "errors", "log", "result" ],
        "type" : "object",
        "properties" : {
          "result" : {
            "description" : "The resulting status of the restore.",
            "enum" : [ "SUCCESSFUL", "SUCCESSFUL_WITH_ERRORS", "FAILED" ]
          },
          "errors" : {
            "description" : "A list of errors that occured during the restore process.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "log" : {
            "description" : "A log of the restore process.",
            "type" : "string"
          }
        },
        "example" : "{\n    \"result\": \"SUCCESSFUL_WITH_ERRORS\",\n    \"errors\": [\"An error\", \"Another error\"],\n    \"log\": \"A very long log...\"\n}"
      },
      "source" : {
        "title" : "Root Type for source",
        "description" : "A manga source.",
        "required" : [ "requiresLogin", "id", "name", "supportsLatest" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "description" : "The id of the source, unique across all sources.",
            "type" : "string"
          },
          "name" : {
            "description" : "The name of this source.",
            "type" : "string"
          },
          "lang" : {
            "description" : "The ISO 639-1 compliant language code of the source (two letters in lower case).",
            "type" : "string"
          },
          "langName" : {
            "description" : "The full name of the language of this source in English.",
            "type" : "string"
          },
          "langDisplayName" : {
            "description" : "The full name of the language of this source in the language itself.",
            "type" : "string"
          },
          "supportsLatest" : {
            "description" : "Whether or not this source supports the latest updates screen.",
            "type" : "boolean"
          },
          "requiresLogin" : {
            "description" : "Whether or not the source requires login.",
            "type" : "boolean"
          },
          "loggedIn" : {
            "description" : "Whether or not the user is logged into the source.\n\nWill be `null` if the source does not require login.",
            "type" : "boolean"
          }
        },
        "example" : "{\n    \"id\": \"3\",\n    \"name\": \"MangaDex\",\n    \"lang\": \"fr\",\n    \"langName\": \"French\",\n    \"langDisplayName\": \"Français\",\n    \"supportsLatest\": true,\n    \"requiresLogin\": true,\n    \"loggedIn\": false\n}"
      },
      "catalogue-page" : {
        "description" : "A catalogue/latest-updates page.",
        "required" : [ "mangas", "hasNextPage" ],
        "type" : "object",
        "properties" : {
          "mangas" : {
            "description" : "The mangas on the current page of the catalogue.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/manga"
            }
          },
          "hasNextPage" : {
            "description" : "Whether or not there is another page after this catalogue page.",
            "type" : "boolean"
          }
        }
      },
      "catalogue-page-request" : {
        "description" : "A request for a catalogue page.",
        "required" : [ "page" ],
        "type" : "object",
        "properties" : {
          "page" : {
            "description" : "The page number of the catalogue to obtain.",
            "type" : "integer"
          },
          "query" : {
            "description" : "The search string.",
            "type" : "string"
          },
          "filters" : {
            "$ref" : "#/components/schemas/catalogue-filters",
            "description" : "The filters to apply."
          }
        }
      },
      "latest-updates-request" : {
        "description" : "A request for the latest updates catalogue page.",
        "required" : [ "page" ],
        "type" : "object",
        "properties" : {
          "page" : {
            "description" : "The page number of the catalogue to obtain.",
            "type" : "integer"
          }
        },
        "example" : "{\n    \"page\": 86\n}"
      },
      "preference" : {
        "title" : "Root Type for preference",
        "description" : "A single preference.",
        "required" : [ "key", "value" ],
        "type" : "object",
        "properties" : {
          "key" : {
            "description" : "A unique key for the preference.",
            "type" : "string"
          },
          "value" : {
            "description" : "The value of the preference."
          }
        },
        "example" : "{\n    \"key\": \"pref_reader_theme_key\",\n    \"value\": \"white\"\n}"
      },
      "category" : {
        "title" : "Root Type for category",
        "description" : "A manga category.",
        "required" : [ "id", "name", "manga", "order" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "format" : "int64",
            "description" : "The id of the category.",
            "type" : "integer"
          },
          "name" : {
            "description" : "The name of the category.",
            "type" : "string"
          },
          "order" : {
            "format" : "int64",
            "description" : "Categories are sorted ascending by this number.\n\nMust be unique across all categories.\n\n",
            "type" : "integer"
          },
          "manga" : {
            "description" : "An array of the `id`s of the manga present in this category.",
            "type" : "array",
            "items" : {
              "format" : "int64",
              "type" : "integer"
            }
          }
        },
        "example" : "{\n    \"id\": 321,\n    \"name\": \"Dropped\",\n    \"order\": 1,\n    \"manga\": [2, 5, 19, 26]\n}"
      },
      "recently-read" : {
        "description" : "A recently read manga + chapter combination.",
        "required" : [ "manga", "chapter" ],
        "type" : "object",
        "properties" : {
          "manga" : {
            "$ref" : "#/components/schemas/manga",
            "description" : "The manga that was recently read."
          },
          "chapter" : {
            "$ref" : "#/components/schemas/chapter",
            "description" : "The chapter that was recently read in the manga."
          }
        }
      },
      "manga-flags" : {
        "title" : "Root Type for manga-flags",
        "description" : "Flags specific to manga objects. Often describe sorting and filtering.",
        "required" : [ "displayMode", "downloadedFilter", "readFilter", "sortDirection", "sortType" ],
        "type" : "object",
        "properties" : {
          "sortDirection" : {
            "$ref" : "#/components/schemas/sort-direction",
            "description" : "The sort direction of a manga's chapters."
          },
          "displayMode" : {
            "description" : "Option to display chapters by their name or chapter number.",
            "enum" : [ "NAME", "NUMBER" ]
          },
          "readFilter" : {
            "description" : "Whether or not to show only read/unread chapters.",
            "enum" : [ "READ", "UNREAD", "ALL" ]
          },
          "downloadedFilter" : {
            "description" : "Whether or not to show only downloaded/not downloaded chapters.",
            "enum" : [ "DOWNLOADED", "NOT_DOWNLOADED", "ALL" ]
          },
          "sortType" : {
            "description" : "The method used to sort chapters:\n- by the order they appear in the **source** website\n- by their chapter **number**",
            "enum" : [ "SOURCE", "NUMBER" ]
          }
        },
        "example" : "{\n    \"sortDirection\": \"DESCENDING\",\n    \"displayMode\": \"NAME\",\n    \"readFilter\": \"ALL\",\n    \"downloadedFilter\": \"ALL\",\n    \"sortType\": \"SOURCE\"\n}"
      },
      "mutate-category-manga-request" : {
        "description" : "A request to add/remove manga from a category.",
        "type" : "object",
        "properties" : {
          "add" : {
            "description" : "A list of the `id`s of the manga to add to this category.\n\n`id`s of manga already present in the category will be ignored.",
            "type" : "array",
            "items" : {
              "format" : "int64",
              "type" : "integer"
            }
          },
          "remove" : {
            "description" : "A list of the `id`s of the manga to remove from this category.\n\n`id`s of manga not present in the category will be ignored.",
            "type" : "array",
            "items" : {
              "format" : "int64",
              "type" : "integer"
            }
          }
        }
      },
      "extension" : {
        "description" : "A binary package of sources that can be downloaded from a central repository or uploaded manually by the user.",
        "required" : [ "pkgName", "name", "status", "versionName", "versionCode", "lang" ],
        "type" : "object",
        "properties" : {
          "pkgName" : {
            "description" : "The package name of the extension. Unique across all extensions.",
            "type" : "string"
          },
          "name" : {
            "description" : "The display name of the extension.",
            "type" : "string"
          },
          "status" : {
            "description" : "The status of the extension.\n\n- `INSTALLED`: Extension is installed and trusted\n- `UNTRUSTED`: Extension is installed but not trusted. Sources inside this extension cannot be used until the extension is trusted.\n- `AVAILABLE`: Extension is available in the central repository and is not downloaded/installed",
            "enum" : [ "INSTALLED", "UNTRUSTED", "AVAILABLE" ]
          },
          "versionName" : {
            "description" : "Version name of the extension.",
            "type" : "string"
          },
          "versionCode" : {
            "description" : "Computer-readable version code of extension.",
            "type" : "integer"
          },
          "signatureHash" : {
            "description" : "Signature hash of extension. Only present when extension status is `UNTRUSTED`.\n\nMultiple extensions may have the same signature hash.\n\nThe signature hash is used to trust extensions.",
            "type" : "string"
          },
          "lang" : {
            "description" : "Language of extension represented in ISO 639-1 format. Can also be set to `all` when the extension includes sources of multiple languages.",
            "type" : "string"
          },
          "sources" : {
            "description" : "A list of the `id`s of all the sources included in the extension. Extensions may include multiple sources. Only present when the extension status is `INSTALLED`.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "hasUpdate" : {
            "description" : "Whether or not an update is available for this extension in the central repository. Only present when the extension status is `UNTRUSTED` or `INSTALLED`.",
            "type" : "boolean"
          }
        },
        "example" : "{\n    \"pkgName\": \"eu.kanade.tachiyomi.extension.en.dynasty\",\n    \"name\": \"Dynasty\",\n    \"status\": \"INSTALLED\",\n    \"versionName\": \"1.2.6\",\n    \"versionCode\": 6,\n    \"lang\": \"en\",\n    \"sources\": [\n        \"738706855355689486\"\n    ],\n    \"hasUpdate\": true\n}"
      },
      "error" : {
        "description" : "An error.",
        "required" : [ "type", "message" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "description" : "The type of the error, not human readable.\n\nWill be `UNKNOWN` if the type is unknown.",
            "type" : "string"
          },
          "stackTrace" : {
            "description" : "Stack trace of the error to be used for debugging purposes.\n\nMay not be present if no stack trace could be generated.",
            "type" : "string"
          },
          "message" : {
            "description" : "A human readable message representing this error.",
            "type" : "string"
          }
        },
        "example" : "{\n    \"type\": \"UNKNOWN\",\n    \"stackTrace\": \"java.lang.IllegalStateException: Not enough cheese!\\r\\n\\tat Line_3.<init>(Unknown Source)\\r\\n\\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\\r\\n\\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\\r\\n\\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.ja\\r\\n\\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\\r\\n\\tat org.jetbrains.kotlin.cli.common.repl.GenericReplEvaluator$eval$1$scriptInstance$1.invoke(Gener\\r\\n\\tat org.jetbrains.kotlin.cli.jvm.repl.configuration.SnippetExecutionInterceptor$Plain.execute(Snip\\r\\n\\tat org.jetbrains.kotlin.cli.jvm.repl.ReplInterpreter$eval$evalRes$1.invoke(ReplInterpreter.kt:101\\r\\n\\tat org.jetbrains.kotlin.cli.common.repl.GenericReplEvaluator.eval(GenericReplEvaluator.kt:94)\\r\\n\\tat org.jetbrains.kotlin.cli.common.repl.GenericReplCompilingEvaluator.eval(GenericReplCompilingEv\\r\\n\\tat org.jetbrains.kotlin.cli.common.repl.GenericReplCompilingEvaluator.compileAndEval(GenericReplC\\r\\n\\tat org.jetbrains.kotlin.cli.jvm.repl.ReplInterpreter.eval(ReplInterpreter.kt:96)\\r\\n\\tat org.jetbrains.kotlin.cli.jvm.repl.ReplFromTerminal.eval(ReplFromTerminal.kt:115)\\r\\n\\tat org.jetbrains.kotlin.cli.jvm.repl.ReplFromTerminal.one(ReplFromTerminal.kt:106)\\r\\n\\tat org.jetbrains.kotlin.cli.jvm.repl.ReplFromTerminal.doRun(ReplFromTerminal.kt:71)\\r\\n\\tat org.jetbrains.kotlin.cli.jvm.repl.ReplFromTerminal.access$doRun(ReplFromTerminal.kt:38)\\r\\n\\tat org.jetbrains.kotlin.cli.jvm.repl.ReplFromTerminal$Companion.run(ReplFromTerminal.kt:171)\\r\\n\\tat org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:104)\\r\\n\\tat org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:57)\\r\\n\\tat org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.java:96)\\r\\n\\tat org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.java:52)\\r\\n\\tat org.jetbrains.kotlin.cli.common.CLITool.exec(CLITool.kt:93)\\r\\n\\tat org.jetbrains.kotlin.cli.common.CLITool.exec(CLITool.kt:71)\\r\\n\\tat org.jetbrains.kotlin.cli.common.CLITool.exec(CLITool.kt:39)\\r\\n\\tat org.jetbrains.kotlin.cli.common.CLITool$Companion.doMainNoExit(CLITool.kt:204)\\r\\n\\tat org.jetbrains.kotlin.cli.common.CLITool$Companion.doMain(CLITool.kt:196)\\r\\n\\tat org.jetbrains.kotlin.cli.jvm.K2JVMCompiler$Companion.main(K2JVMCompiler.kt:348)\\r\\n\\tat org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.main(K2JVMCompiler.kt)\\r\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\r\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\\r\\n\\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\r\\n\\tat java.lang.reflect.Method.invoke(Method.java:498)\\r\\n\\tat org.jetbrains.kotlin.preloading.Preloader.run(Preloader.java:81)\\r\\n\\tat org.jetbrains.kotlin.preloading.Preloader.main(Preloader.java:43)\",\n    \"message\": \"The operation failed\"\n}"
      },
      "login-request" : {
        "title" : "Root Type for source-login-request",
        "description" : "A login request.",
        "required" : [ "password", "username" ],
        "type" : "object",
        "properties" : {
          "username" : {
            "description" : "The username to login with.",
            "type" : "string"
          },
          "password" : {
            "format" : "password",
            "description" : "The password to login with.",
            "type" : "string"
          }
        },
        "example" : "{\n    \"username\": \"nulldev\",\n    \"password\": \"hunter7\"\n}"
      },
      "tracking-service" : {
        "description" : "A tracking service.",
        "required" : [ "id", "possibleStatuses", "possibleScores", "loggedIn", "name", "themeColor" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "description" : "The `id` of the tracking service",
            "type" : "integer"
          },
          "possibleStatuses" : {
            "description" : "The list of the possible statuses a user can assign to a manga.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/tracking-status"
            }
          },
          "possibleScores" : {
            "description" : "The list of possible scores a user can assign to a manga.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/tracking-score"
            }
          },
          "loggedIn" : {
            "description" : "Whether or not the user is logged into this tracking service.",
            "type" : "boolean"
          },
          "name" : {
            "description" : "The display name of this tracking service",
            "type" : "string"
          },
          "themeColor" : {
            "description" : "The background color of this tracking service's logo.\n\nFormatted in hexidecimal format: `#RRGGBB`",
            "type" : "string"
          },
          "username" : {
            "description" : "The username the user is logged in as in this tracking service. Only present if `loggedIn` is `true`.",
            "type" : "string"
          },
          "oauthUrl" : {
            "description" : "Some sources use OAuth authentication. The presence of this field indicates the client uses OAuth authentication.\n\nTo log a user into an OAuth based source, the client must:\n1. Open the `oauthUrl` in a browser window. The client should **not** show the normal username/password dialog.\n2. When authentication is complete, the browser will redirect the user to a URL with the `tachiyomi` scheme (e.g. `tachiyomi://anilist-auth`).\n3. The client should intercept URLs with the `tachiyomi` scheme and use the `/api/v3/handle-url` API to transmit the URL back to the server.",
            "type" : "string"
          }
        },
        "example" : "{\n    \"id\": 0,\n    \"possibleStatuses\": [\n        {\n            \"id\": 0,\n            \"displayName\": \"Plan to read\"\n        },\n        {\n            \"id\": 1,\n            \"displayName\": \"Reading\"\n        },\n        {\n            \"id\": 2,\n            \"displayName\": \"Completed\"\n        }\n    ],\n    \"possibleScores\": [\n        {\n            \"id\": 0,\n            \"score\": 1.0\n        },\n        {\n            \"id\": 1,\n            \"score\": 2.0\n        },\n        {\n            \"id\": 2,\n            \"score\": 3.0\n        },\n        {\n            \"id\": 3,\n            \"score\": 4.0\n        },\n        {\n            \"id\": 4,\n            \"score\": 5.0\n        }\n    ],\n    \"loggedIn\": true,\n    \"name\": \"MyAnimeList\",\n    \"themeColor\": \"#2E51A2\",\n    \"username\": \"nulldev\"\n}"
      },
      "tracking-status" : {
        "description" : "The status of a manga in a tracking service.",
        "required" : [ "id", "displayName" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "description" : "The `id` of the status, unique to a single tracking service.\n\n**WARNING:** Different tracking services may use the same `id` to represent different statuses.",
            "type" : "integer"
          },
          "displayName" : {
            "description" : "The display name of this tracking status.",
            "type" : "string"
          }
        },
        "example" : "{\n    \"id\": 5,\n    \"displayName\": \"Plan to read\"\n}"
      },
      "tracking-score" : {
        "description" : "A score the user can assign to a manga in a tracking service.",
        "required" : [ "id", "score" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "description" : "The `id` of the score, unique to a single tracking service.\n\n**WARNING:** Different tracking services may use the same `id` to represent different scores.",
            "type" : "integer"
          },
          "score" : {
            "format" : "float",
            "description" : "How much *stars* or *points* this score actually represents. This is the value that should be used when displaying a score in the UI.\n\nWhen displaying a score chooser, the client should sort the scores by this value. A higher score represents a more *positive* rating.",
            "type" : "number"
          }
        },
        "example" : "{\n    \"id\": 2,\n    \"score\": 1.5\n}"
      },
      "url-handle-result" : {
        "description" : "The result of handling a URL with a `tachiyomi` scheme.\n\nThe `data` field will hold:\n- A JSON object of type `tracking-oauth-login` if the value of the `type` field is `TRACKING_LOGIN`",
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "description" : "The type of the URL.",
            "enum" : [ "TRACKING_LOGIN" ]
          },
          "data" : {
            "description" : "Additional information about the URL.",
            "type" : "string"
          }
        }
      },
      "tracking-oauth-login" : {
        "description" : "The result of an OAuth login into a tracking service.",
        "required" : [ "status", "service" ],
        "type" : "object",
        "properties" : {
          "service" : {
            "description" : "The `id` of the service that was logged into.",
            "type" : "integer"
          },
          "status" : {
            "description" : "The status of this login.",
            "enum" : [ "SUCCESSFUL", "FAILED_UNKNOWN", "FAILED_ALREADY_LOGGED_IN" ]
          }
        }
      },
      "tracking-search-result" : {
        "description" : "A single manga result when the user searches for manga in a tracking service. The client should never modify this object as it may need to be passed back to the server.",
        "required" : [ "service", "title" ],
        "type" : "object",
        "properties" : {
          "service" : {
            "description" : "The `id` of the service providing this search result.",
            "type" : "integer"
          },
          "extra" : {
            "description" : "Information used by the server when this object is passed back to the server. Assume the values of this field to be opaque (the client should not attempt to parse it).\n\n*Notes for server used only (ignore if you are building a client):*\n\nContains the following `TrackSearch.kt` fields:\n- `media_id` - id of manga on tracker\n- `library_id` - id of manga in user library in tracker",
            "type" : "string"
          },
          "title" : {
            "description" : "The title of the manga represented by this search result.",
            "type" : "string"
          },
          "chapters" : {
            "description" : "The total amount of chapters in this manga.",
            "type" : "integer"
          },
          "trackingUrl" : {
            "description" : "The url of this manga on the tracking service.",
            "type" : "string"
          },
          "coverUrl" : {
            "description" : "The image URL of the cover of this manga on the tracking service.",
            "type" : "string"
          },
          "summary" : {
            "description" : "A description of this manga on the tracking service.",
            "type" : "string"
          },
          "status" : {
            "description" : "The publishing status of this manga (e.g. `Publishing` or `Completed`).",
            "type" : "string"
          },
          "type" : {
            "description" : "The type of this manga. (e.g. `Manga` or `Webtoon`)",
            "type" : "string"
          },
          "startDate" : {
            "description" : "The date this manga started publishing. Clients should not attempt to parse this date, it should be displayed directly in the UI.",
            "type" : "string"
          }
        },
        "example" : "{\n    \"service\": 1,\n    \"extra\": \"{media_id: 1923, library_id: 8}\",\n    \"title\": \"Danberu nan kiro moteru?\",\n    \"chapters\": 58,\n    \"trackingUrl\": \"https://kitsu.io/manga/dumbbell-nan-kilo-moteru\",\n    \"coverUrl\": \"https://media.kitsu.io/manga/poster_images/38750/large.jpg\",\n    \"summary\": \"Sakura Hibiki is your average high school girl, with a voracious appetite. Noticing her clothes tightening in lieu of her slowly expanding waistline she decides to look into enrolling in the nearby gym. There she runs into a girl from her grade named Souryuuin Akemi.\\r\\n\\r\\nAkemi, who has a muscle fetish tries to get Hibiki to enroll in the gym despite its high ratio of macho men. Thankfully a beautiful trainer, Machio, appears and unknowingly convinces her to enroll and start her quest to a great body.\\r\\n\\r\\n(Source: MU)\",\n    \"status\": \"Publishing\",\n    \"type\": \"Manga\",\n    \"startDate\": \"Aug 5, 2016\"\n}"
      },
      "track" : {
        "description" : "Tracking information associated with a manga.",
        "required" : [ "lastChapterRead", "totalChapters", "status", "service" ],
        "type" : "object",
        "properties" : {
          "lastChapterRead" : {
            "description" : "The last read chapter. `0` indicates that the user has not read any chapters yet.",
            "type" : "integer"
          },
          "totalChapters" : {
            "description" : "The total number of chapters in this manga. `0` or any negative number indicates that it is unknown.",
            "type" : "integer"
          },
          "score" : {
            "description" : "The id of the score the user has assigned to this manga.\n\nThe possible scores are provided in the `possibleScores` field of the tracking service.\n\nWhen not present, indicates the user has not yet assigned a score to this manga.",
            "type" : "integer"
          },
          "displayScore" : {
            "description" : "The string the score the user assigned to this manga as should be displayed as on the UI.\n\nFor example, some sources display scores as happy/sad.\n\nWhen not present, indicates the user has not yet assigned a score to this manga.",
            "type" : "string"
          },
          "status" : {
            "description" : "The id of the status the user has assigned to this manga.\n\nThe possible statuses are available in the `possibleStatuses` field in the tracking service.",
            "type" : "integer"
          },
          "trackingUrl" : {
            "description" : "The url of this manga on the tracking service.",
            "type" : "string"
          },
          "service" : {
            "description" : "The `id` of the tracking service that this track is connected to.",
            "type" : "integer"
          }
        },
        "example" : "{\n    \"lastChapterRead\": 3,\n    \"totalChapters\": 58,\n    \"score\": 2,\n    \"displayScore\": \"😊\",\n    \"status\": 0,\n    \"trackingUrl\": \"https://anilist.co/manga/97626/Dumbbell-Nan-Kilo-Moteru\"\n}"
      },
      "catalogue-filters" : {
        "description" : "The filters for a source.\n\nThere are no OpenAPI docs for this data type as it is too difficult to express.",
        "type" : "object",
        "example" : "[  // List of filters (MUST be rendered in order on the page)\n\t{\n\t\t\"_cmaps\": {                     // Data on what Java types each JSON field is for internal use. \n                                           // DO NOT USE THIS as it can be removed/changed at any time\n                                           // without warning.\n                                           // This data MUST NOT be modified and MUST be retained when calling the search API with the filters JSON.\n\t\t\t\"name\": \"java.lang.String\"  // Example: The 'name' field is a Java String type\n\t\t},\n\t\t\"name\": \"Lorem ipsum\",          // The name of the header\n\t\t\"_type\": \"HEADER\"               // The type of the filter\n                                           // The HEADER filter is a single line of non-editable text used to provide information to the user\n\t},\n\t{\n\t\t\"_cmaps\": {\n\t\t\t\"name\": \"java.lang.String\"\n\t\t},\n\t\t\"name\": \"\",                     // Should be ignored in separator filters\n\t\t\"_type\": \"SEPARATOR\"            // The SEPARATOR filter is a horizontal line used to divide two sections of filters\n\t},\n\t{\n\t\t\"_cmaps\": {\n\t\t\t\"name\": \"java.lang.String\",\n\t\t\t\"state\": \"java.lang.Boolean\"\n\t\t},\n\t\t\"name\": \"Show R-18\",            // The name of the filter\n\t\t\"state\": true,                  // The initial state of the filter\n\t\t\"_type\": \"CHECKBOX\"             // The CHECKBOX filter is a two-state, toggleable filter\n\t},\n\t{\n\t\t\"_cmaps\": {\n\t\t\t\"name\": \"java.lang.String\",\n\t\t\t\"state\": \"java.lang.String\"\n\t\t},\n\t\t\"name\": \"Author\",               // The name of the filter\n\t\t\"state\": \"\",                    // The initial state of the filter\n\t\t\"_type\": \"TEXT\"                 // The TEXT filter is a single-line, editable text filter\n\t},\n\t{\n\t\t\"values\": [                     // All possible values of the filter\n\t\t\t\"All\",\n\t\t\t\"Japanese Manga\",\n\t\t\t\"Korean Manhwa\",\n\t\t\t\"Chinese Manhua\"\n\t\t],\n\t\t\"_cmaps\": {\n\t\t\t\"name\": \"java.lang.String\",\n\t\t\t\"state\": \"java.lang.Integer\"\n\t\t},\n\t\t\"name\": \"Type\",                 // The name of the filter\n\t\t\"state\": 0,                     // The initial state of the filter\n\t\t\"_type\": \"SELECT\"               // The SELECT filter is a drop-down, single-selection filter\n                                           // One (no more, no less) item can be selected at a time\n                                           // It's state is the index of the selected item (0-indexed)\n\t},\n\t{\n\t\t\"_cmaps\": {\n\t\t\t\"name\": \"java.lang.String\",\n\t\t\t\"state\": \"java.lang.Integer\"\n\t\t},\n\t\t\"name\": \"Completed\",            // The name of the filter\n\t\t\"state\": 0,                     // The initial state of the filter\n\t\t\"_type\": \"TRISTATE\"             // The TRISTATE filter is a triple-state filter\n                                           // Users can cycle through the three states:\n                                           // +-------+---------+\n                                           // | Index | State   |\n                                           // +-------+---------+\n                                           // | 0     | IGNORE  |\n                                           // | 1     | INCLUDE |\n                                           // | 2     | EXCLUDE |\n                                           // +-------+---------+\n\t},\n\t{\n\t\t\"state\": [\n\t\t\t{\n\t\t\t\t\"_cmaps\": {\n\t\t\t\t\t\"name\": \"java.lang.String\",\n\t\t\t\t\t\"state\": \"java.lang.Integer\"\n\t\t\t\t},\n\t\t\t\t\"name\": \"Action\",\n\t\t\t\t\"state\": 0,\n\t\t\t\t\"_type\": \"TRISTATE\"\n\t\t\t}\n\t\t],\n\t\t\"_cmaps\": {\n\t\t\t\"name\": \"java.lang.String\"\n\t\t},\n\t\t\"name\": \"Genres\",               // The name of the group\n\t\t\"_type\": \"GROUP\"                // The GROUP filter is used to group multiple filters together\n                                           // Although nested groups are currently not used, they may be supported in the future\n\t},\n\t{\n\t\t\"values\": [                     // All the different attributes we can sort by\n\t\t\t\"Series name\",\n\t\t\t\"Rating\",\n\t\t\t\"Views\",\n\t\t\t\"Total chapters\",\n\t\t\t\"Last chapter\"\n\t\t],\n\t\t\"state\": {                      // The initial state of the filter\n\t\t\t\"index\": 2,                 // The current attribute we are sorting by\n\t\t\t\"ascending\": false          // Are we sorting the attribute ascending or descending?\n\t\t},\n\t\t\"_cmaps\": {\n\t\t\t\"name\": \"java.lang.String\"\n\t\t},\n\t\t\"name\": \"Order by\",             // The name of the filters\n\t\t\"_type\": \"SORT\"                 // The SORT filters allows the user to sort by one (no more, no less) specific attribute\n                                           // The attribute can be sorted ascending or descending\n\t}\n]"
      },
      "mutate-track-request" : {
        "description" : "A request to change tracking data.",
        "required" : [ "lastChapterRead", "status" ],
        "type" : "object",
        "properties" : {
          "lastChapterRead" : {
            "description" : "The last chapter read.\n\n`0` indicates that the user has not read any chapters yet.",
            "type" : "integer"
          },
          "score" : {
            "description" : "The `id` of the score the user wishes to assign to this manga.\n\nThe possible scores are provided in the `possibleScores` field of the tracking service.\n\nLeave as `null` to assign no score to this manga.",
            "type" : "integer"
          },
          "status" : {
            "description" : "The `id` of the status the user wishes to assign to this manga.\n\nThe possible statuses are available in the `possibleStatuses` field in the tracking service.",
            "type" : "integer"
          }
        },
        "example" : "{\n    \"lastChapterRead\": 5,\n    \"score\": 3,\n    \"status\": 0\n}"
      }
    },
    "securitySchemes" : {
      "account" : {
        "type" : "http",
        "description" : "Username/password authentication using HTTP BASIC.",
        "scheme" : "basic"
      },
      "account-cookie" : {
        "type" : "apiKey",
        "description" : "Provide account in the following format: `{USERNAME} {BASE64 ENCODED PASSWORD}`.",
        "name" : "TW-Auth",
        "in" : "cookie"
      }
    }
  },
  "security" : [ {
    "account" : [ ]
  }, {
    "account-cookie" : [ ]
  }, { } ]
}